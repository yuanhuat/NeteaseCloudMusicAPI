name: Docker Image CI (Push to Docker Hub)

on:
  push:
    branches: ["main"]  # 代码推送到 main 分支时触发
  pull_request:
    branches: ["main"]  # 向 main 分支提 PR 时触发（可选，仅构建不推送）

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1：拉取当前仓库代码（获取 Dockerfile 和项目文件）
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤 2：登录 Docker Hub（仅推送时需要，PR 触发时跳过）
      - name: Login to Docker Hub
        if: github.event_name == 'push'  # 仅代码推送时执行登录（PR 不推送，避免浪费权限）
        uses: docker/login-action@v3  # Docker 官方登录 Action，简化认证
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}  # 从 Secrets 读取用户名
          password: ${{ secrets.DOCKER_HUB_TOKEN }}     # 从 Secrets 读取令牌

      # 步骤 3：构建 Docker 镜像（并添加规范标签，便于版本管理）
      - name: Build Docker image
        run: |
          # 定义镜像标签：Docker Hub 格式为「用户名/仓库名:版本」
          # 示例：username123/my-node-app:20240909-123456（时间戳避免标签重复）
          IMAGE_TAG="${{ secrets.DOCKER_HUB_USERNAME }}/my-image-name:$(date +%Y%m%d-%H%M%S)"
          # 构建镜像（--file 指定 Dockerfile 路径，默认当前目录）
          docker build . --file Dockerfile --tag $IMAGE_TAG
          # 额外添加 latest 标签（标记为最新版本，可选）
          docker tag $IMAGE_TAG "${{ secrets.DOCKER_HUB_USERNAME }}/my-image-name:latest"
          # 保存标签到环境变量，供后续推送使用
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 步骤 4：推送镜像到 Docker Hub（仅推送时执行）
      - name: Push Docker image to Docker Hub
        if: github.event_name == 'push'
        run: |
          # 推送带时间戳的标签和 latest 标签
          docker push ${{ env.IMAGE_TAG }}
          docker push "${{ secrets.DOCKER_HUB_USERNAME }}/my-image-name:latest"
